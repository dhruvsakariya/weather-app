{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","value","onKeyPress","event","key","fetch","then","res","json","result","console","log","onChange","e","target","placeholder","name","sys","country","date","month","getMonth","day","getDay","year","getFullYear","tdate","getDate","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAEMA,EACC,mCADDA,EAEE,2CA+EOC,MA5Ef,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KA8CA,OACE,qBAAKC,UAAmC,oBAAhBF,EAAQG,MAC1BH,EAAQG,KAAKC,KAAO,GACpB,WAED,MAJL,SAKE,iCACE,qBAAKF,UAAU,aAAf,SACE,uBAAOG,KAAK,OAAOH,UAAU,aAAaI,MAAOR,EAAOS,WApDjD,SAACC,GACI,UAAdA,EAAMC,KACRC,MAAM,GAAD,OAAIf,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACvDgB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJb,EAAWa,GACXf,EAAS,IACTgB,QAAQC,IAAIF,OA6CgEG,SAAU,SAAAC,GAAC,OAAInB,EAASmB,EAAEC,OAAOb,QAAQc,YAAY,gBAEzG,oBAAjBpB,EAAQG,KAAwB,gCAAK,sBAAKD,UAAU,eAAf,UAC5C,sBAAKA,UAAU,WAAf,UAA2BF,EAAQqB,KAAnC,IAA0CrB,EAAQsB,IAAIC,WACtD,sBAAKrB,UAAU,OAAf,UA5CY,SAACsB,GACnB,IAwBIC,EAxBS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAYiBD,EAAKE,YACpBC,EAXO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAIaH,EAAKI,UAChBC,EAAOL,EAAKM,cACZC,EAAQP,EAAKQ,UAEjB,MAAM,GAAN,OAAUL,EAAV,YAAiBI,EAAjB,YAA0BN,EAA1B,YAAmCI,GAcNI,CAAY,IAAIC,MAAvC,UAGA,sBAAKhC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACGiC,KAAKC,MAAMpC,EAAQG,KAAKC,MAD3B,YAGA,sBAAKF,UAAU,UAAf,UAA0BF,EAAQA,QAAQ,GAAGG,KAA7C,aACe,SChEZkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.b7b20fdf.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst api = {\r\n  key: \"afca64aad307aef3955e821328807b7f\",\r\n  base: \"https://api.openweathermap.org/data/2.5/\",\r\n};\r\n\r\nfunction App() {\r\n\r\n  const [query, setQuery] = useState('');\r\n  const [weather, setWeather] = useState({});\r\n\r\n  const search = (event) => {\r\n    if (event.key === 'Enter') {\r\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n        .then(res => res.json())\r\n        .then(result => {\r\n          setWeather(result)\r\n          setQuery('')\r\n          console.log(result);\r\n        })\r\n    }\r\n  }\r\n\r\n  const dateBuilder = (date) => {\r\n    let months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    let days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ];\r\n\r\n    let month = months[date.getMonth()]\r\n    let day = days[date.getDay()]\r\n    let year = date.getFullYear();\r\n    let tdate = date.getDate();\r\n\r\n    return `${day} ${tdate} ${month} ${year}`\r\n  };\r\n  return (\r\n    <div className={(typeof weather.main != 'undefined')\r\n      ? ((weather.main.temp > 25)\r\n        ? 'App warm'\r\n        : 'App')\r\n      :  'App'}>\r\n      <main>\r\n        <div className=\"search-box\">\r\n          <input type=\"text\" className=\"search-bar\" value={query} onKeyPress={search} onChange={e => setQuery(e.target.value)} placeholder=\"search...\" />\r\n        </div>\r\n        {typeof (weather.main) != 'undefined' ? (<div><div className=\"location-box\">\r\n          <div className=\"location\">{weather.name},{weather.sys.country}</div>\r\n          <div className=\"date\">{dateBuilder(new Date())} </div>\r\n        </div>\r\n\r\n          <div className=\"weather-box\">\r\n            <div className=\"temp\">\r\n              {Math.round(weather.main.temp)}â„ƒ\r\n            </div>\r\n            <div className=\"weather\">{weather.weather[0].main} </div>\r\n          </div></div>) : ('')}\r\n\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}